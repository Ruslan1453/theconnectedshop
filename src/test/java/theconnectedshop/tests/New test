
package theconnectedshop.utils;

import org.openqa.selenium.By;

public final class Locators {
    private Locators() {}

    public static final By HEADER_LOGO_LINK = By.cssSelector("a.header__heading-link");
    public static final By HEADER_LOGO_IMAGE = By.tagName("img");

    
    public static final By SEARCH_INPUT = By.id("Search-In-Inline");
    public static final By SEARCH_DROPDOWN = By.cssSelector(".predictive-search");
    public static final By SEARCH_PRODUCT_ITEMS = By.cssSelector("li.predictive-search__item--product a");

  
    public static final By PRODUCT_TITLE = By.cssSelector("div.product__title > h1"); 
    public static final By PRODUCT_PRICE = By.cssSelector("span.price-item--regular");
    public static final By ADD_TO_CART_BTN = By.cssSelector("#card-submit-button-template--19784308457713__main");
    public static final By PRODUCT_IMAGE = By.cssSelector("#Slide-template--19784308457713__main-35036585558257 > a > div > img");
    public static final By PRODUCT_DESCRIPTION_TAB = By.cssSelector("#shopify-section-template--19784308457713__52bf00c5-c1a5-4bcd-9b87-204e690ab1d5 > div > div > div > div.tabs__title-list-wrapper.flex > div > ul > li:nth-child(1) > label");
}


package theconnectedshop.pages;

import theconnectedshop.utils.Locators;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class ProductPage {
    private final WebDriver driver;
    private final WebDriverWait wait;

    public ProductPage(WebDriver driver, WebDriverWait wait) {
        this.driver = driver;
        this.wait = wait;
    }

    public String getTitle() {
        return wait.until(ExpectedConditions.visibilityOfElementLocated(Locators.PRODUCT_TITLE)).getText();
    }

    public String getPrice() {
        return driver.findElement(Locators.PRODUCT_PRICE).getText();
    }

    public WebElement getAddToCartButton() {
        return driver.findElement(Locators.ADD_TO_CART_BTN);
    }

    public WebElement getImage() {
        return driver.findElement(Locators.PRODUCT_IMAGE);
    }

    public String getDescription() {
        return driver.findElement(Locators.PRODUCT_DESCRIPTION_TAB).getText();
    }
}

// ===== HeaderComponent.java =====
package theconnectedshop.pages.components;

import theconnectedshop.utils.Locators;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class HeaderComponent {
    private final WebDriver driver;
    private final WebDriverWait wait;

    public HeaderComponent(WebDriver driver, WebDriverWait wait) {
        this.driver = driver;
        this.wait = wait;
    }

    public WebElement getLogoLink() {
        return wait.until(ExpectedConditions.visibilityOfElementLocated(Locators.HEADER_LOGO_LINK));
    }

    public WebElement getLogoImage() {
        return getLogoLink().findElement(Locators.HEADER_LOGO_IMAGE);
    }
}


package theconnectedshop.pages.components;

import theconnectedshop.utils.Locators;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class PredictiveSearchComponent {
    private final WebDriver driver;
    private final WebDriverWait wait;

    public PredictiveSearchComponent(WebDriver driver, WebDriverWait wait) {
        this.driver = driver;
        this.wait = wait;
    }

    public void typeQuery(String query) {
        WebElement input = wait.until(ExpectedConditions.elementToBeClickable(Locators.SEARCH_INPUT));
        input.clear();
        input.sendKeys(query);
    }

    public void waitForDropdown() {
        wait.until(ExpectedConditions.visibilityOfElementLocated(Locators.SEARCH_DROPDOWN));
    }

    public void clickFirstProductSuggestion() {
        waitForDropdown();
        WebElement firstLink = wait.until(ExpectedConditions.elementToBeClickable(Locators.SEARCH_PRODUCT_ITEMS));
        firstLink.click();
    }
}


package theconnectedshop.tests;

import theconnectedshop.core.BaseTest;
import theconnectedshop.pages.HomePage;
import org.junit.jupiter.api.*;

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@Order(1)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class HomePageTests extends BaseTest {

    @Test
    @Order(1)
    public void openHomePage() {
        new HomePage(driver).open();
        Assertions.assertEquals(
                "The Connected Shop - Smart Locks, Smart Sensors, Smart Home & Office",
                driver.getTitle(),
                "Title should match"
        );
    }
}


package theconnectedshop.tests;

import theconnectedshop.core.BaseTest;
import theconnectedshop.pages.HomePage;
import theconnectedshop.pages.components.HeaderComponent;
import org.junit.jupiter.api.*;

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@Order(2)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class HeaderTests extends BaseTest {

    @Test
    @Order(2)
    public void verifyLogoLink() {
        new HomePage(driver).open();
        HeaderComponent header = new HeaderComponent(driver, wait);

        var logoLink = header.getLogoLink();
        Assertions.assertTrue(logoLink.isDisplayed(), "Logo link should be visible");

        String hrefValue = logoLink.getAttribute("href");
        Assertions.assertTrue(hrefValue.endsWith("/"), "Logo link should point to home page");

        var logoImage = header.getLogoImage();
        Assertions.assertTrue(logoImage.isDisplayed(), "Logo image should be visible");
        Assertions.assertEquals(
                "The Connected Shop",
                logoImage.getAttribute("alt").trim(),
                "Logo alt text should match 'The Connected Shop'"
        );
    }
}


package theconnectedshop.tests;

import theconnectedshop.core.BaseTest;
import theconnectedshop.pages.HomePage;
import theconnectedshop.pages.components.PredictiveSearchComponent;
import org.junit.jupiter.api.*;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@Order(3)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class SearchTests extends BaseTest {

    @Test
    @Order(3)
    public void verifySearchInputField() {
        new HomePage(driver).open();

        WebElement searchInput = driver.findElement(By.cssSelector("input[name='q']"));
        Assertions.assertTrue(searchInput.isDisplayed(), "Search input should be visible");
        Assertions.assertEquals(
                "Search",
                searchInput.getAttribute("placeholder"),
                "Search placeholder should match 'Search'"
        );

        searchInput.clear();
        searchInput.sendKeys("lock");
        Assertions.assertEquals(
                "lock",
                searchInput.getAttribute("value"),
                "Search input should contain entered text"
        );
    }

    @Test
    @Order(4)
    public void verifySearchSuggestionAndClick() {
        new HomePage(driver).open();

        PredictiveSearchComponent search = new PredictiveSearchComponent(driver, wait);
        search.typeQuery("lock");

        WebElement suggestion = wait.until(
                ExpectedConditions.visibilityOfElementLocated(
                        By.cssSelector("a.predictive-search__header")
                )
        );

        String suggestionText = suggestion.getText().trim();
        Assertions.assertTrue(
                suggestionText.toLowerCase().contains("lock"),
                "Suggestion should contain searched word 'lock', but was: " + suggestionText
        );

        suggestion.click();
        wait.until(ExpectedConditions.urlContains("search"));
        String currentUrl = driver.getCurrentUrl();
        Assertions.assertTrue(
                currentUrl.toLowerCase().contains("lock"),
                "URL should contain the search query 'lock', but was: " + currentUrl
        );
    }

    @Test
    @Order(5)
    public void verifySearchSuggestionItem() {
        new HomePage(driver).open();

        PredictiveSearchComponent search = new PredictiveSearchComponent(driver, wait);
        search.typeQuery("lock");

        WebElement suggestionItem = wait.until(
                ExpectedConditions.visibilityOfElementLocated(
                        By.cssSelector("a.predictive-search__header.h5")
                )
        );

        WebElement span = suggestionItem.findElement(By.tagName("span"));
        String suggestionText = span.getText().trim();

        Assertions.assertTrue(
                suggestionText.toLowerCase().contains("lock"),
                "Suggestion item should contain 'lock', but was: " + suggestionText
        );

        String hrefValue = suggestionItem.getAttribute("href");
        Assertions.assertTrue(
                hrefValue.contains("search?q=lock"),
                "Href should contain search query 'lock', but was: " + hrefValue
        );

        suggestionItem.click();
        wait.until(ExpectedConditions.urlContains("search?q=lock"));

        String currentUrl = driver.getCurrentUrl();
        Assertions.assertTrue(
                currentUrl.contains("search?q=lock"),
                "URL after clicking should contain 'search?q=lock', but was: " + currentUrl
        );
    }

    @Test
    @Order(6)
    public void verifySmartDoorLockSuggestionNavigatesToProductPage() {
        new HomePage(driver).open();

        WebElement smartDoorLockSuggestion = wait.until(ExpectedConditions.elementToBeClickable(
                By.cssSelector("a[href*='/products/smart-door-lock']")
        ));

        String suggestionText = smartDoorLockSuggestion.getText().trim();
        smartDoorLockSuggestion.click();

        wait.until(ExpectedConditions.urlContains("/products/smart-door-lock"));
        String currentUrl = driver.getCurrentUrl();
        Assertions.assertTrue(
                currentUrl.contains("/products/smart-door-lock"),
                "Clicking Smart Door Lock suggestion should navigate to product page, but was: " + currentUrl
        );

        String pageTitle = driver.getTitle().toLowerCase();
        Assertions.assertTrue(
                pageTitle.contains("smart door lock") || suggestionText.toLowerCase().contains("smart door lock"),
                "Page title should reflect Smart Door Lock. Title: " + pageTitle + " | Suggestion: " + suggestionText
        );
    }
}


package theconnectedshop.tests;

import theconnectedshop.core.BaseTest;
import theconnectedshop.pages.ProductPage;
import org.junit.jupiter.api.*;


@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class ProductTests extends BaseTest {

    @Test
    @Order(7)
    public void verifySmartDoorLockProductPageElements() {
        driver.get("https://theconnectedshop.com/products/smart-door-lock-slim");

        ProductPage product = new ProductPage(driver, wait);

        Assertions.assertTrue(product.getTitle().toLowerCase().contains("smart door lock"));
       
        Assertions.assertTrue(product.getAddToCartButton().isDisplayed());

        Assertions.assertEquals("Add to cart", product.getAddToCartButton().getText().trim());
        
        Assertions.assertTrue(product.getImage().isDisplayed());
        
       
    }
}

 @AfterAll
    public static void teardown() {
        if (driver != null) {
            driver.quit();

        }
    }

